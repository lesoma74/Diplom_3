{"name": "Проверка открытия и закрытия модального окна деталей заказа", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=127.0.6533.100); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF706D09632+30946]\n\t(No symbol) [0x00007FF706CBE3C9]\n\t(No symbol) [0x00007FF706BB6FDA]\n\t(No symbol) [0x00007FF706BBDA57]\n\t(No symbol) [0x00007FF706BBFD31]\n\t(No symbol) [0x00007FF706BBFDD0]\n\t(No symbol) [0x00007FF706C0A3AB]\n\t(No symbol) [0x00007FF706BFC126]\n\t(No symbol) [0x00007FF706C2CA6A]\n\t(No symbol) [0x00007FF706BFBBB6]\n\t(No symbol) [0x00007FF706C2CC80]\n\t(No symbol) [0x00007FF706C4B041]\n\t(No symbol) [0x00007FF706C2C813]\n\t(No symbol) [0x00007FF706BFA6E5]\n\t(No symbol) [0x00007FF706BFB021]\n\tGetHandleVerifier [0x00007FF706E3F83D+1301229]\n\tGetHandleVerifier [0x00007FF706E4BDB7+1351783]\n\tGetHandleVerifier [0x00007FF706E42A03+1313971]\n\tGetHandleVerifier [0x00007FF706D3DD06+245686]\n\t(No symbol) [0x00007FF706CC758F]\n\t(No symbol) [0x00007FF706CC3804]\n\t(No symbol) [0x00007FF706CC3992]\n\t(No symbol) [0x00007FF706CBA3EF]\n\tBaseThreadInitThunk [0x00007FF890BA257D+29]\n\tRtlUserThreadStart [0x00007FF8924EAF28+40]", "trace": "self = <tests.test_order_feed.TestOrderFeed object at 0x000001FDA3813860>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"34ae203f0d21ab16d611349f68ee1be7\")>\n\n    @allure.title(\"Проверка открытия и закрытия модального окна деталей заказа\")\n    @allure.description(\n        \"Тест проверяет открытие и закрытие модального окна деталей заказа после оформления заказа и перехода в ленту заказов.\")\n    def test_order_details_modal_opens_and_closes(self, driver):\n        # Логин\n        self.login_page.login(self.email, self.password)\n    \n        # Переход в конструктор\n        constructor_button = self.wait.until(EC.element_to_be_clickable(ConstructorLocators.constructor_button))\n        constructor_button.click()\n        self.wait.until(EC.url_contains(CONSTRUCTOR_URL))\n    \n        # Добавить ингредиенты\n        # Перетащить булку в зону заказа\n        self.constructor_page.drag_and_drop_ingredient(\n            ConstructorLocators.bun_fluorescent,\n            ConstructorLocators.bun_fluorescent_top\n        )\n    \n        # Перетащить соус в зону заказа\n        self.constructor_page.drag_and_drop_ingredient(\n            ConstructorLocators.sauce_spicy_x,\n            ConstructorLocators.sauce_spicy_x_top\n        )\n    \n        # Оформить заказ\n        self.constructor_page.place_order()\n    \n        # Закрыть модальное окно заказа\n        self.constructor_page.close_order_modal()\n    \n        # Ожидание, пока модальное окно исчезнет\n        self.wait.until(EC.invisibility_of_element_located((By.CLASS_NAME, \"Modal_modal_overlay__x2ZCr\")))\n    \n        # Переход в личный кабинет\n        self.profile_page.click_profile_button()\n        self.wait.until(EC.url_contains(PROFILE_URL))\n        assert PROFILE_URL in driver.current_url\n    \n        # Нажать на кнопку \"История заказов\"\n        self.profile_page.click_order_history()\n    \n        # Прокрутка до последнего элемента в истории заказов\n        last_order = self.wait.until(EC.presence_of_element_located(ConstructorLocators.LAST_ORDER_IN_HISTORY))\n        driver.execute_script(\"arguments[0].scrollIntoView(true);\", last_order)\n    \n        # Проверка того, что последний элемент действительно последний\n        assert last_order.is_displayed()\n    \n        # Переход в ленту заказов\n        orders_feed_button = self.wait.until(EC.element_to_be_clickable(ConstructorLocators.orders_feed_button))\n        orders_feed_button.click()\n        self.wait.until(EC.url_contains(FEED_URL))\n    \n        # Открыть ленту заказов\n        self.order_feed_page.open_orders_feed()\n    \n        # Открыть детали заказа\n>       self.order_feed_page.open_order_details()\n\ntests\\test_order_feed.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage_objects\\order_feed_page.py:21: in open_order_details\n    self.wait.until(EC.element_to_be_clickable(OrderFeedLocators.order_element)).click()\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001FDA3E28E30>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...07FF706CBA3EF]\\\\n\\\\tBaseThreadInitThunk [0x00007FF890BA257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF8924EAF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=127.0.6533.100); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF706D09632+30946]\nE       \t(No symbol) [0x00007FF706CBE3C9]\nE       \t(No symbol) [0x00007FF706BB6FDA]\nE       \t(No symbol) [0x00007FF706BBDA57]\nE       \t(No symbol) [0x00007FF706BBFD31]\nE       \t(No symbol) [0x00007FF706BBFDD0]\nE       \t(No symbol) [0x00007FF706C0A3AB]\nE       \t(No symbol) [0x00007FF706BFC126]\nE       \t(No symbol) [0x00007FF706C2CA6A]\nE       \t(No symbol) [0x00007FF706BFBBB6]\nE       \t(No symbol) [0x00007FF706C2CC80]\nE       \t(No symbol) [0x00007FF706C4B041]\nE       \t(No symbol) [0x00007FF706C2C813]\nE       \t(No symbol) [0x00007FF706BFA6E5]\nE       \t(No symbol) [0x00007FF706BFB021]\nE       \tGetHandleVerifier [0x00007FF706E3F83D+1301229]\nE       \tGetHandleVerifier [0x00007FF706E4BDB7+1351783]\nE       \tGetHandleVerifier [0x00007FF706E42A03+1313971]\nE       \tGetHandleVerifier [0x00007FF706D3DD06+245686]\nE       \t(No symbol) [0x00007FF706CC758F]\nE       \t(No symbol) [0x00007FF706CC3804]\nE       \t(No symbol) [0x00007FF706CC3992]\nE       \t(No symbol) [0x00007FF706CBA3EF]\nE       \tBaseThreadInitThunk [0x00007FF890BA257D+29]\nE       \tRtlUserThreadStart [0x00007FF8924EAF28+40]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException"}, "description": "Тест проверяет открытие и закрытие модального окна деталей заказа после оформления заказа и перехода в ленту заказов.", "parameters": [{"name": "browser", "value": "'chrome'"}], "start": 1723660786719, "stop": 1723660795661, "uuid": "f6e9dd38-4f11-47d5-9cc9-83d517484f75", "historyId": "3f77894ffbefcbed8f19a1c58f436269", "testCaseId": "1effd48980d4136c222d3d76913c729f", "fullName": "tests.test_order_feed.TestOrderFeed#test_order_details_modal_opens_and_closes", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('driver', 'open_login_page')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_order_feed"}, {"name": "subSuite", "value": "TestOrderFeed"}, {"name": "host", "value": "AmosovLenovo"}, {"name": "thread", "value": "44472-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order_feed"}]}